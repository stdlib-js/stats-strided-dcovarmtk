{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/dcovarmtk.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the covariance of two double-precision floating-point strided arrays provided known means and using a one-pass textbook algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {number} meanx - mean of `x`\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - stride length of `x`\n* @param {NonNegativeInteger} offsetX - starting index of `x`\n* @param {number} meany - mean of `y`\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - stride length of `y`\n* @param {NonNegativeInteger} offsetY - starting index of `y`\n* @returns {number} covariance\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dcovarmtk( 4, 1, 1.25, x, 2, 1, 1.25, x, 2, 1 );\n* // returns 6.25\n*/\nfunction dcovarmtk( N, correction, meanx, x, strideX, offsetX, meany, y, strideY, offsetY ) { // eslint-disable-line max-len\n\tvar ix;\n\tvar iy;\n\tvar C;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tC = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tC += ( x[ ix ] - meanx ) * ( y[ iy ] - meany );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn C / n;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dcovarmtk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the covariance of two double-precision floating-point strided arrays provided known means and using a one-pass textbook algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {number} meanx - mean of `x`\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - stride length of `x`\n* @param {number} meany - mean of `y`\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - stride length of `y`\n* @returns {number} covariance\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dcovarmtk( x.length, 1, 1.0/3.0, x, 1, 1.0/3.0, x, 1 );\n* // returns ~4.3333\n*/\nfunction dcovarmtk( N, correction, meanx, x, strideX, meany, y, strideY ) {\n\treturn ndarray( N, correction, meanx, x, strideX, stride2offset( N, strideX ), meany, y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = dcovarmtk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar dcovarmtk = require( './dcovarmtk.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dcovarmtk, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dcovarmtk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the covariance of two double-precision floating-point strided arrays provided known means and using a one-pass textbook algorithm.\n*\n* @module @stdlib/stats-strided-dcovarmtk\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dcovarmtk = require( '@stdlib/stats-strided-dcovarmtk' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dcovarmtk( x.length, 1, 1.0/3.0, x, 1, 1.0/3.0, x, 1 );\n* // returns ~4.3333\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dcovarmtk = require( '@stdlib/stats-strided-dcovarmtk' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dcovarmtk.ndarray( 4, 1, 1.25, x, 2, 1, 1.25, x, 2, 1 );\n* // returns 6.25\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar dcovarmtk;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdcovarmtk = main;\n} else {\n\tdcovarmtk = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dcovarmtk;\n\n// exports: { \"ndarray\": \"dcovarmtk.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cA6CA,SAASC,EAAWC,EAAGC,EAAYC,EAAOC,EAAGC,EAASC,EAASC,EAAOC,EAAGC,EAASC,EAAU,CAC3F,IAAIC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIb,EAAIC,EACHD,GAAK,GAAKa,GAAK,EACnB,MAAO,KAKR,IAHAH,EAAKL,EACLM,EAAKF,EACLG,EAAI,EACEE,EAAI,EAAGA,EAAId,EAAGc,IACnBF,IAAOT,EAAGO,CAAG,EAAIR,IAAYK,EAAGI,CAAG,EAAIL,GACvCI,GAAMN,EACNO,GAAMH,EAEP,OAAOI,EAAIC,CACZ,CAKAf,EAAO,QAAUC,ICtEjB,IAAAgB,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IA0Bd,SAASC,EAAWC,EAAGC,EAAYC,EAAOC,EAAGC,EAASC,EAAOC,EAAGC,EAAU,CACzE,OAAOT,EAASE,EAAGC,EAAYC,EAAOC,EAAGC,EAASP,EAAeG,EAAGI,CAAQ,EAAGC,EAAOC,EAAGC,EAASV,EAAeG,EAAGO,CAAQ,CAAE,CAC/H,CAKAX,EAAO,QAAUG,ICxDjB,IAAAS,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAY,IACZC,EAAU,IAKdF,EAAaC,EAAW,UAAWC,CAAQ,EAK3CH,EAAO,QAAUE,ICYjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAYD,EAEZC,EAAYC,EAMb,OAAO,QAAUD",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "dcovarmtk", "N", "correction", "meanx", "x", "strideX", "offsetX", "meany", "y", "strideY", "offsetY", "ix", "iy", "C", "n", "i", "require_dcovarmtk", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "dcovarmtk", "N", "correction", "meanx", "x", "strideX", "meany", "y", "strideY", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "dcovarmtk", "ndarray", "join", "tryRequire", "isError", "main", "dcovarmtk", "tmp"]
}
