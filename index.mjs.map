{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/dcovarmtk.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the covariance of two double-precision floating-point strided arrays provided known means and using a one-pass textbook algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {number} meanx - mean of `x`\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - stride length of `x`\n* @param {NonNegativeInteger} offsetX - starting index of `x`\n* @param {number} meany - mean of `y`\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - stride length of `y`\n* @param {NonNegativeInteger} offsetY - starting index of `y`\n* @returns {number} covariance\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dcovarmtk( 4, 1, 1.25, x, 2, 1, 1.25, x, 2, 1 );\n* // returns 6.25\n*/\nfunction dcovarmtk( N, correction, meanx, x, strideX, offsetX, meany, y, strideY, offsetY ) { // eslint-disable-line max-len\n\tvar ix;\n\tvar iy;\n\tvar C;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tC = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tC += ( x[ ix ] - meanx ) * ( y[ iy ] - meany );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn C / n;\n}\n\n\n// EXPORTS //\n\nexport default dcovarmtk;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the covariance of two double-precision floating-point strided arrays provided known means and using a one-pass textbook algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {number} meanx - mean of `x`\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - stride length of `x`\n* @param {number} meany - mean of `y`\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - stride length of `y`\n* @returns {number} covariance\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dcovarmtk( x.length, 1, 1.0/3.0, x, 1, 1.0/3.0, x, 1 );\n* // returns ~4.3333\n*/\nfunction dcovarmtk( N, correction, meanx, x, strideX, meany, y, strideY ) {\n\treturn ndarray( N, correction, meanx, x, strideX, stride2offset( N, strideX ), meany, y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dcovarmtk;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dcovarmtk from './dcovarmtk.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcovarmtk, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcovarmtk;\n"],"names":["dcovarmtk","N","correction","meanx","x","strideX","offsetX","meany","y","strideY","offsetY","ix","iy","C","n","i","NaN","ndarray","stride2offset","setReadOnly"],"mappings":";;6NA6CA,SAASA,EAAWC,EAAGC,EAAYC,EAAOC,EAAGC,EAASC,EAASC,EAAOC,EAAGC,EAASC,GACjF,IAAIC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIb,EAAIC,EACHD,GAAK,GAAKa,GAAK,EACnB,OAAOE,IAKR,IAHAL,EAAKL,EACLM,EAAKF,EACLG,EAAI,EACEE,EAAI,EAAGA,EAAId,EAAGc,IACnBF,IAAOT,EAAGO,GAAOR,IAAYK,EAAGI,GAAOL,GACvCI,GAAMN,EACNO,GAAMH,EAEP,OAAOI,EAAIC,CACZ,CChBA,SAASd,EAAWC,EAAGC,EAAYC,EAAOC,EAAGC,EAASE,EAAOC,EAAGC,GAC/D,OAAOQ,EAAShB,EAAGC,EAAYC,EAAOC,EAAGC,EAASa,EAAejB,EAAGI,GAAWE,EAAOC,EAAGC,EAASS,EAAejB,EAAGQ,GACrH,CCtBAU,EAAAnB,EAAA,UAAAiB"}